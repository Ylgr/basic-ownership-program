{"version":3,"sources":["logo.svg","MyWallet.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MyWallet","connection","useConnection","programId","wallet","useAnchorWallet","walletAddress","publicKey","toString","useState","fingerprintData","setFingerprintData","stringAccount","setStringAccount","owner","setOwner","toAddress","setToAddress","md5ExtendByte","fetchOwnership","a","provider","anchor","preflightCommitment","commitment","program","Program","BasicOwnershipIdl","account","ownership","fetch","useEffect","className","type","onChange","file","target","files","length","Uint8Array","arrayBuffer","blob","md5StringData","md5","asBytes","_stringAccount","Keypair","fromSeed","concat","multiple","Button","onClick","rpc","initialize","accounts","systemProgram","SystemProgram","signer","signers","event","value","toAddressBase58","bs58","transfer","PublicKey","App","network","WalletAdapterNetwork","Devnet","endpoint","React","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","src","logo","alt","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"i7CAAe,G,OAAA,IAA0B,kC,0IC0I1BA,EAvHY,WACvB,IAAQC,EAAeC,cAAfD,WACFE,EAAY,+CAGZC,EAASC,cACTC,EAAa,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAQG,UAAUC,WAGxC,EAA8CC,mBAAmB,IAAjE,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA0CF,mBAAyB,MAAnE,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA0BJ,mBAAiB,IAA3C,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAkCN,qBAAlC,mBAAOO,EAAP,KAAkBC,EAAlB,KACMC,EAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAE/CC,EAAc,uCAAG,gCAAAC,EAAA,0DAChBhB,IAAUQ,EADM,wBAETS,EAAW,IAAIC,IAAgBrB,EAAYG,EAAQ,CACrDmB,oBAAqB,SACrBC,WAAY,cAEVC,EAAU,IAAIC,IAAQC,EAA0BxB,EAAWkB,GANlD,kBAQaI,EAAQG,QAAQC,UAAUC,MAAMlB,EAAcL,WAR3D,OAQLsB,EARK,OASXd,EAASc,EAAUf,MAAMN,YATd,kDAWXO,EAAS,IAXE,0DAAH,qDAmBpB,OAHAgB,qBAAU,WACNZ,MACD,CAACP,IAEA,qCACKR,GACG,gDAAmBE,MACnB,mEAGJ,sBAAK0B,UAAU,gBAAf,UACI,sBAAMA,UAAU,iBAAhB,SACI,cAAC,IAAD,UACI,cAAC,IAAD,QAGP5B,GAAU,qCACP,uBACA,uBAAO6B,KAAK,OAAOC,SAAQ,uCAAE,WAAOC,GAAP,mBAAAf,EAAA,0DACrBe,EAAKC,OAAOC,QAASF,EAAKC,OAAOC,MAAMC,OADlB,6BAEJC,WAFI,SAEaJ,EAAKC,OAAOC,MAAM,GAAGG,cAFlC,0BAEfC,EAFe,eAGfC,EAAgBC,IAAIF,EAAM,CAACG,SAAS,IACpCC,EAAiBvB,IAAYwB,QAAQC,SAAS,IAAIR,WAAWG,EAAcM,OAAO9B,KACxFP,EAAmB+B,GACnB7B,EAAiBgC,GANI,UAOf1B,IAPe,4CAAF,sDASxB8B,UAAU,IACZrC,IAA4B,KAAVE,EAAe,qCAC9B,4BAAG,iEACH,cAACoC,EAAA,EAAD,CAAQC,QAAO,sBAAE,8BAAA/B,EAAA,6DACPC,EAAW,IAAIC,IAAgBrB,EAAYG,EAAQ,CACrDmB,oBAAqB,SACrBC,WAAY,cAEVC,EAAU,IAAIC,IAAQC,EAA0BxB,EAAWkB,GALpD,SAMPI,EAAQ2B,IAAIC,WACd3C,EADE,OAEFN,QAFE,IAEFA,OAFE,EAEFA,EAAQG,UACR,CACI+C,SAAU,CACNzB,UAAS,OAAEjB,QAAF,IAAEA,OAAF,EAAEA,EAAeL,UAC1BgD,cAAeC,gBAAcrD,UAC7BsD,OAAM,OAAErD,QAAF,IAAEA,OAAF,EAAEA,EAAQG,WAEpBmD,QAAS,CAAC9C,KAfL,uBAiBPO,IAjBO,2CAAjB,oCAoBC,qCACD,8BAAG,wDAA2BL,IAAUR,EAAgB,MAAO,UAA5D,SAA8EQ,KAChFA,IAAUR,GAAiB,qCACxB,0DACA,uBAAO2B,KAAK,OAAOC,SAAU,SAACyB,GAC1B1C,EAAa0C,EAAMvB,OAAOwB,UAE9B,cAACV,EAAA,EAAD,CAAQC,QAAO,sBAAE,gCAAA/B,EAAA,0DACVJ,EADU,uBAEH6C,EAAkBC,SAAY9C,GAC9BK,EAAW,IAAIC,IAAgBrB,EAAYG,EAAQ,CACrDmB,oBAAqB,SACrBC,WAAY,cAEVC,EAAU,IAAIC,IAAQC,EAA0BxB,EAAWkB,GAPxD,SAQHI,EAAQ2B,IAAIW,SACd,IAAIC,YAAUH,GACd,CACIP,SAAU,CACNzB,UAAWjB,EAAcL,UACzBgD,cAAeC,gBAAcrD,UAC7BsD,OAAQpC,EAASjB,OAAOG,WAE5BmD,QAAS,KAhBR,uBAkBHvC,IAlBG,2CAAjB,wCAuBR,cAAC,IAAD,cCvDL8C,MAvDf,WAEE,IAAMC,EAAUC,IAAqBC,OAE/BC,EAAWC,IAAMC,SAAQ,kBAAMC,wBAAcN,KAAU,CAACA,IAIxDO,EAAUH,IAAMC,SACpB,iBAAM,CACJG,cACAC,cACAC,cACAC,cACAC,YAAgB,CAAEZ,YAClBa,YAAyB,CAAEb,eAE7B,CAACA,IAGH,OACE,cAAC,IAAD,CAAoBG,SAAUA,EAA9B,SACE,cAAC,IAAD,CAAgBI,QAASA,EAAzB,SACE,qBAAKzC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKgD,IAAKC,EAAMjD,UAAU,WAAWkD,IAAI,SACzC,sCACO,+CADP,0BAGA,mBACElD,UAAU,WACVmD,KAAK,sBACL/C,OAAO,SACPgD,IAAI,sBAJN,yBASA,mBACEpD,UAAU,WACVmD,KAAK,gDACL/C,OAAO,SACPgD,IAAI,sBAJN,8BASA,cAAC,EAAD,cCrDGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.84cbbc07.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.317aa4d3.svg\";","import React, {useState, useEffect} from 'react';\nimport {\n    useAnchorWallet,\n    useConnection,\n    useWallet,\n} from '@solana/wallet-adapter-react';\nimport {\n    WalletModalProvider,\n    WalletDisconnectButton,\n    WalletMultiButton,\n} from '@solana/wallet-adapter-react-ui';\nimport md5 from \"md5\";\nimport * as anchor from \"@project-serum/anchor\";\nimport {Keypair, PublicKey, SystemProgram} from \"@solana/web3.js\";\nimport {Program} from \"@project-serum/anchor\";\nimport BasicOwnershipIdl from \"./idl/basic_ownership.json\";\nimport {Button} from \"@solana/wallet-adapter-react-ui/lib/Button\";\nimport * as bs58 from 'bs58';\n\nconst MyWallet: React.FC = () => {\n    const { connection } = useConnection();\n    const programId = 'AtJQsbbEmsKRAsTN3bAfwpLn3w6gYDwMwerJVqTv1AJD'\n\n    // if you use anchor, use the anchor hook instead\n    const wallet = useAnchorWallet();\n    const walletAddress = wallet?.publicKey.toString();\n\n\n    const [fingerprintData, setFingerprintData] = useState<number[]>([])\n    const [stringAccount, setStringAccount] = useState<Keypair | null>(null)\n    const [owner, setOwner] = useState<string>('')\n    const [toAddress, setToAddress] = useState<string>()\n    const md5ExtendByte = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\n\n    const fetchOwnership = async () => {\n        if(wallet && stringAccount) {\n            const provider = new anchor.Provider(connection, wallet, {\n                preflightCommitment: \"recent\",\n                commitment: \"processed\",\n            });\n            const program = new Program(BasicOwnershipIdl as any, programId, provider);\n            try {\n                const ownership = await program.account.ownership.fetch(stringAccount.publicKey);\n                setOwner(ownership.owner.toString());\n            } catch (e) {\n                setOwner('')\n            }\n        }\n    }\n\n    useEffect(() => {\n        fetchOwnership()\n    }, [stringAccount])\n    return (\n        <>\n            {wallet &&\n                <p>Your wallet is {walletAddress}</p> ||\n                <p>Hello! Click the button to connect</p>\n            }\n\n            <div className=\"multi-wrapper\">\n                <span className=\"button-wrapper\">\n                    <WalletModalProvider>\n                        <WalletMultiButton />\n                    </WalletModalProvider>\n                </span>\n                {wallet && <>\n                    <br/>\n                    <input type=\"file\" onChange={async (file) => {\n                        if (file.target.files && file.target.files.length) {\n                            const blob = new Uint8Array(await file.target.files[0].arrayBuffer())\n                            const md5StringData = md5(blob, {asBytes: true})\n                            const _stringAccount = anchor.web3.Keypair.fromSeed(new Uint8Array(md5StringData.concat(md5ExtendByte)));\n                            setFingerprintData(md5StringData)\n                            setStringAccount(_stringAccount)\n                            await fetchOwnership()\n                        }\n                    }} multiple={false}/>\n                    {stringAccount && (owner === '' ? <>\n                        <p><b>Your file not have fingerprint</b></p>\n                        <Button onClick={async () => {\n                            const provider = new anchor.Provider(connection, wallet, {\n                                preflightCommitment: \"recent\",\n                                commitment: \"processed\",\n                            });\n                            const program = new Program(BasicOwnershipIdl as any, programId, provider);\n                            await program.rpc.initialize(\n                                fingerprintData,\n                                wallet?.publicKey,\n                                {\n                                    accounts: {\n                                        ownership: stringAccount?.publicKey,\n                                        systemProgram: SystemProgram.programId,\n                                        signer: wallet?.publicKey\n                                    },\n                                    signers: [stringAccount],\n                                });\n                            await fetchOwnership()\n                        }\n                        }>Create finger print</Button>\n                    </>: <>\n                        <p><b>Owner of your file is ({owner === walletAddress ? 'You': 'Not you'}): </b>{owner}</p>\n                        {owner === walletAddress && <>\n                            <label>Transfer to address: </label>\n                            <input type='text' onChange={(event) => {\n                                setToAddress(event.target.value)\n                            }}/>\n                            <Button onClick={async () => {\n                                if(toAddress) {\n                                    const toAddressBase58 = bs58.decode(toAddress)\n                                    const provider = new anchor.Provider(connection, wallet, {\n                                        preflightCommitment: \"recent\",\n                                        commitment: \"processed\",\n                                    });\n                                    const program = new Program(BasicOwnershipIdl as any, programId, provider);\n                                    await program.rpc.transfer(\n                                        new PublicKey(toAddressBase58),\n                                        {\n                                            accounts: {\n                                                ownership: stringAccount.publicKey,\n                                                systemProgram: SystemProgram.programId,\n                                                signer: provider.wallet.publicKey\n                                            },\n                                            signers: [],\n                                        });\n                                    await fetchOwnership()\n                                }\n                            }}>Transfer owner ship</Button>\n                        </>}\n                    </>)}\n                    <WalletDisconnectButton />\n                </>\n                }\n            </div>\n        </>\n    )\n};\n\nexport default MyWallet;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n  getTorusWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport MyWallet from \"./MyWallet\";\nfunction App() {\n  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n  const network = WalletAdapterNetwork.Devnet;\n  // You can also provide a custom RPC endpoint\n  const endpoint = React.useMemo(() => clusterApiUrl(network), [network]);\n\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you configure here will be compiled into your application\n  const wallets = React.useMemo(\n    () => [\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      getLedgerWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [network]\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n              Edit <code>src/App.tsx</code> and save to reload.\n            </p>\n            <a\n              className=\"App-link\"\n              href=\"https://reactjs.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Learn React\n            </a>\n\n            <a\n              className=\"App-link\"\n              href=\"https://solana-labs.github.io/solana-web3.js/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Solana Web3 docs\n            </a>\n            {}\n            <MyWallet />\n          </header>\n        </div>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}